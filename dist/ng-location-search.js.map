{"version":3,"sources":["ng-location-search.js"],"names":["angular","module","directive","$rootScope","$log","$timeout","$location","$window","$parse","$httpParamSerializer","restrict","require","link","scope","elem","attrs","Ctrl","untrailling_slash","url","isString","replace","trailling_slash","to_type","value","type","isArray","length","split","isNumber","parseFloat","get_default_value","key","isObject","default_value","ngLocationSearchDefault","$eval","search_keys","modelCtrl","formCtrl","parseLocationSearch","new_search","is_replace_search","ngLocationSearchReplace","reset_search","ngLocationSearchReset","location_href","ngLocationSearchUrl","abs_url","location","href","hash","delay_change","ngLocationSearchDelay","value_object","fromJson","err","forEach","val","default_val","search_val","isDefined","toString","current_search","search","extend","equals","$broadcast","is_add_to_url","indexOf","is_internal_url","is_abs_url","protocol","path_url","path","hash_url","param_url","new_href","$$html5","$apply","_path_urls","parseInt","ngLocationSearch","timeout_debounce","changeModel","loc_search","types","ngLocationSearchTypes","toJson","getter","ngModel","setter","assign","applyModel","model","data","$valid","model_name","name","$watch","$modelValue","newVal","oldVal","timeout","ngLocationSearchDebounce","cancel","$on","event","newUrl","oldUrl","newState","oldState","resetForm","changeForm","submitForm","applySubmit","fields","ngSubmit","$resetForm","undefined","$submitForm","submit","form_name","form","isUndefined","on","handleDestroyEvent","window"],"mappings":"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","file":"ng-location-search.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    angular.module('ngLocationSearch', []).directive('ngLocationSearch', [\n        '$rootScope',\n        '$log',\n        '$timeout',\n        '$location',\n        '$window',\n        '$parse',\n        '$httpParamSerializer',\n        function ($rootScope, $log, $timeout, $location, $window, $parse, $httpParamSerializer) {\n            return {\n                restrict: \"A\",\n                require: ['?ngModel', '?^form'],\n                link: function (scope, elem, attrs, Ctrl) {\n\n                    /**\n                     * Trailling Slash Url\n                     *\n                     * @param url\n                     */\n                    function untrailling_slash (url) {\n\n                        if ( angular.isString(url) ) {\n                            return url.replace(/\\/$/, '');\n                        }\n\n                        return false;\n                    }\n\n                    /**\n                     * Trailling Slash Url\n                     *\n                     * @param url\n                     */\n                    function trailling_slash (url) {\n\n                        if ( angular.isString(url) ) {\n                            return untrailling_slash(url) + '/';\n                        }\n\n                        return false;\n                    }\n\n                    function to_type ( value, type) {\n\n                        switch (type) {\n                            case 'array':\n                                return angular.isArray(value) ? value : ((angular.isString(value) && value.length > 0) ? value.split(',') : null);\n                            case 'number':\n                                return angular.isNumber(value) ? value : parseFloat(value);\n                            case 'string':\n                                return angular.isString(value) ? value : null;\n                            default:\n                                return value;\n                        }\n                    }\n\n                    function get_default_value(value, key) {\n\n                        return ((key && angular.isObject(value)) ? value[key] : value);\n                    }\n\n                    var default_value = attrs.ngLocationSearchDefault ? scope.$eval(attrs.ngLocationSearchDefault) : null;\n                    var search_keys;\n\n                    /**\n                     * Set the controllers for model and form\n                     */\n                    var modelCtrl = Ctrl[0];\n                    var formCtrl = Ctrl[1];\n\n                    /**\n                     * Parse value for set the location search.\n                     *\n                     * @param value\n                     */\n                    var parseLocationSearch = function (value) {\n\n                        var new_search = {};\n                        var is_replace_search = scope.$eval(attrs.ngLocationSearchReplace);\n                        var reset_search = scope.$eval(attrs.ngLocationSearchReset);\n                        var location_href = attrs.ngLocationSearchUrl;\n                        var abs_url = $window.location.href.replace($window.location.hash, '');\n                        var delay_change = attrs.ngLocationSearchDelay || 0;\n\n                        //Deserializes a JSON search string.\n                        try {\n                            var value_object = angular.fromJson(value);\n\n                            value = value_object;\n                        }\n                        catch(err) {\n\n                        }\n\n                        //Apply key val on location search.\n                        angular.forEach(search_keys, function (key, val) {\n\n                            var default_val = get_default_value(default_value, key);\n\n                            //If value null reset the search\n                            if (!value) {\n                                default_val = null;\n                            }\n\n                            var search_val = default_val;\n\n                            if (angular.isObject(value) && angular.isDefined(value[key]) ) {\n                                search_val = value[key];\n                            }\n                            else if (angular.isString(value)) {\n                                search_val = value;\n                            }\n                            else if (angular.isNumber(value)) {\n                                search_val = value.toString();\n                            }\n\n                            if (angular.isArray(search_val)) {\n                                search_val = search_val.toString();\n                            }\n\n                            new_search[key] = (search_val && search_val !== '') ? search_val.toString() : ((search_val === '') ? null : default_val);\n                        });\n\n                        var current_search = $location.search();\n\n                        if (!reset_search) {\n                            new_search = angular.extend({}, current_search, new_search);\n                        }\n\n                        //Exit if same as current url search\n                        if (angular.equals(new_search, current_search)) {\n                            return;\n                        }\n\n                        $rootScope.$broadcast('ngLocationSearchChangeStart', new_search, current_search);\n\n                        $timeout(function () {\n\n                            //Redirect to search url\n                            if (angular.isString(location_href) && location_href !== abs_url) {\n\n                                var is_add_to_url = (location_href.indexOf('/') === 0) ? false : true;\n                                var is_internal_url = location_href.indexOf('#!/') !== -1 || location_href.indexOf('#/') !== -1;\n                                var is_abs_url = location_href.indexOf($location.protocol()) === 0;\n\n                                var path_url = $location.path();\n                                var hash_url = untrailling_slash($window.location.hash.replace($location.url(), ''));\n                                var param_url = $httpParamSerializer(new_search);\n\n                                var new_href = '';\n\n                                if (!$location.$$html5 || is_abs_url) {\n\n                                    param_url = param_url ? '?' + param_url : '';\n                                    new_href = location_href + param_url;\n\n                                    if (!is_internal_url && is_abs_url) {\n                                        path_url = path_url && !$location.$$html5 ? '/' : '';\n                                        new_href = location_href + hash_url + path_url + param_url ;\n                                    }\n\n                                    $window.location.href = new_href;\n\n                                    $location.search(new_search);\n                                }\n                                else {\n\n                                    $location.search(param_url);\n\n                                    if (is_replace_search) {\n                                        scope.$apply();\n                                    }\n\n                                    if (is_add_to_url) {\n\n                                        var _path_urls = path_url.split('/');\n\n                                        //Prevent same last for relative url\n                                        if ( _path_urls[_path_urls.length -1] === location_href) {\n                                            new_href = path_url;\n                                        }\n                                        else {\n                                            new_href = path_url + '/' + location_href;\n                                        }\n                                    }\n                                    else {\n                                        new_href = location_href;\n                                    }\n\n                                    $location.path(new_href);\n                                    scope.$apply();\n                                }\n                            }\n                            else {\n                                $location.search(new_search);\n                            }\n\n                            $rootScope.$broadcast('ngLocationSearchChangeSuccess', new_search, current_search);\n                        }, parseInt(delay_change, 10));\n                    };\n\n                    //Use the current model scope.\n                    //Only if attribute is set\n                    if (attrs.ngLocationSearch && (modelCtrl || formCtrl)) {\n\n                        search_keys = scope.$eval(attrs.ngLocationSearch);\n                        search_keys = angular.isArray(search_keys) ? search_keys : [attrs.ngLocationSearch];\n\n                        var timeout_debounce;\n                        var search = default_value;\n\n                        //Set the model change from location search object.\n                        var changeModel = function (loc_search) {\n                            var types = attrs.ngLocationSearchTypes ? scope.$eval(attrs.ngLocationSearchTypes) : {};\n\n                            search = (search_keys.length > 1) ? {} : default_value;\n\n                            //Find in url search params\n                            angular.forEach(search_keys, function (key, val) {\n\n                                var default_val = get_default_value(default_value, key);\n\n                                if (angular.isObject(search)) {\n                                    search[key] = to_type((angular.isDefined(loc_search[key]) ? loc_search[key] : default_val), types[key]);\n                                }\n                                else {\n\n                                    search = to_type((angular.isDefined(loc_search[key]) ? loc_search[key] : default_val), types[key]);\n                                }\n                            });\n\n                            //transform selected search to string\n                            if (angular.isObject(search)) {\n                                search = angular.toJson(search);\n                            }\n\n                            //Set default model value.\n                            var getter = $parse(attrs.ngModel);\n                            var setter = getter.assign;\n                            setter(scope, search);\n                        };\n\n\n                        /**\n                         * Evaluate location search attribute if is ngModel\n                         */\n                        if ( modelCtrl ) {\n\n                            var applyModel = function (model, data) {\n\n                                if (model.$valid) {\n\n                                    parseLocationSearch(data);\n                                }\n                                else {\n                                    var model_name = attrs.name;\n                                    $rootScope.$broadcast('ngLocationSearchChangeError', 'model', model_name, model);\n                                }\n                            };\n\n                            //Watch model change\n                            scope.$watch(function () {\n                                    return modelCtrl.$modelValue;\n                                },\n                                function (newVal, oldVal) {\n\n                                    if (newVal !== oldVal) {\n\n                                        var timeout = attrs.ngLocationSearchDebounce;\n\n                                        if (timeout_debounce) {\n                                            $timeout.cancel(timeout_debounce);\n                                        }\n\n                                        if (timeout) {\n                                            timeout_debounce = $timeout(function () {\n\n                                                applyModel(modelCtrl, newVal);\n                                            }, parseInt(timeout, 10));\n                                        }\n                                        else {\n                                            applyModel(modelCtrl, newVal);\n                                        }\n                                    }\n                                }\n                            );\n\n                            //Change Model on location change start\n                            scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                                changeModel($location.search());\n                            });\n\n                            //Init Model\n                            changeModel($location.search());\n                        }\n\n\n                        /**\n                         * Evaluate location search attribute if is form\n                         */\n                        if (formCtrl) {\n\n                            var resetForm, changeForm, submitForm, applySubmit;\n\n                            //Set the model change from location search object.\n                            changeForm = function (loc_search) {\n\n                                if (search_keys.length > 0) {\n                                    var fields = scope.$eval(attrs.ngSubmit);\n                                    var types = attrs.ngLocationSearchTypes ? scope.$eval(attrs.ngLocationSearchTypes) : {};\n\n                                    search = {\n                                        $resetForm: undefined,\n                                        $submitForm: submitForm\n                                    };\n\n                                    angular.forEach(search_keys, function(key, val) {\n\n                                        var default_val = get_default_value(default_value, key);\n\n                                        search[key] = to_type((angular.isDefined(loc_search[key]) ? loc_search[key] : default_val), types[key]);\n\n                                        if (angular.isDefined(loc_search[key])) {\n                                            search.$resetForm = resetForm;\n                                        }\n                                    });\n\n                                    fields = !angular.isObject(fields) ? {} : fields;\n                                    search = angular.extend(fields, search);\n\n                                    var getter = $parse(attrs.ngSubmit);\n                                    var setter = getter.assign;\n                                    setter(scope, search);\n                                }\n                            };\n\n                            applySubmit = function (data) {\n\n                                var submit = scope.$eval(attrs.ngSubmit);\n                                var form_name = attrs.name;\n                                var form = scope.$eval(form_name);\n\n                                if (angular.isUndefined(data)) {\n                                    data = submit;\n                                }\n\n                                if (angular.isDefined(data) && (!form || form.$valid)) {\n                                    parseLocationSearch(data);\n                                }\n                                else {\n                                    $rootScope.$broadcast('ngLocationSearchChangeError', 'form', form_name, form);\n                                }\n\n                                return submit;\n                            };\n\n                            submitForm = function (timeout) {\n\n                                timeout = angular.isNumber(timeout) ? timeout : attrs.ngLocationSearchDebounce;\n\n                                if (timeout_debounce) {\n                                    $timeout.cancel(timeout_debounce);\n                                }\n\n                                if (timeout) {\n\n                                    timeout_debounce = $timeout(function () {\n\n                                        applySubmit();\n                                    }, parseInt(timeout, 10));\n                                }\n                                else {\n                                    applySubmit();\n                                }\n                            };\n\n                            resetForm = function () {\n\n                                applySubmit(null);\n                            };\n\n                            //Attach event Submit Form\n                            elem.on('submit', function () {\n                                applySubmit();\n                            });\n\n                            //Change Form on location change start\n                            scope.$on('$locationChangeStart', function(event, newUrl, oldUrl, newState, oldState) {\n\n                                changeForm($location.search());\n                            });\n\n                            //Init Form\n                            changeForm($location.search());\n                        }\n\n                    }\n\n                    /**\n                     * Destroy\n                     */\n                    scope.$on('$destroy', function handleDestroyEvent() {\n                            if ( angular.isDefined(scope[attrs.ngSubmit]) ) {\n                                delete scope[attrs.ngSubmit];\n                            }\n                        }\n                    );\n                }\n\n            };\n        }\n    ]);\n\n})(window.angular);\n"],"sourceRoot":"dist"}